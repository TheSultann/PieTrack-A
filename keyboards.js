const { pieTypes, currencySymbol } = require('./config');
const { formatNumber } = require('./utils');
const db = require('./db');

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∏—Ä–æ–∂–∫–∏'],
            ['üì¶ –í–≤–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–∫–∏', 'üóëÔ∏è –°–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é'],
            ['üí∞ –í–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã', 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'],
            ['üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

// --- –ù–û–í–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –†–ê–°–•–û–î–û–í ---
const expensesMenuKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', callback_data: 'add_expense' }],
            [{ text: 'üìù –ò—Å–ø—Ä–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å', callback_data: 'correct_expense' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –≥–ª. –º–µ–Ω—é', callback_data: 'back_to_main_from_expenses' }]
        ]
    }
};
async function createExpenseCorrectionKeyboard(chatId) {
    const entries = await db.getTodaysExpenseEntries(chatId);
    const buttons = [];
    const hasEntries = entries.length > 0;

    if (hasEntries) {
        entries.forEach(entry => {
            const entryTime = new Date(entry.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', timeZone: 'Asia/Tashkent' });
            buttons.push([
                { text: `+${formatNumber(entry.amount)} ${currencySymbol} (–≤ ${entryTime})`, callback_data: `info_expense_${entry.id}` },
                { text: '–£–¥–∞–ª–∏—Ç—å ‚ùå', callback_data: `delete_expense_${entry.id}` }
            ]);
        });
    }
    buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–∞—Å—Ö–æ–¥–æ–≤', callback_data: 'back_to_expenses_menu' }]);
    return {
        keyboard: { reply_markup: { inline_keyboard: buttons } },
        hasEntries: hasEntries
    };
}


// --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–∏—Ä–æ–∂–∫–æ–≤ ---
const pieTypesKeyboard = {
    reply_markup: {
        inline_keyboard: [
            ...pieTypes.map(type => ([{ text: `‚ûï ${type}`, callback_data: `add_pie_${type}` }])),
            [{ text: 'üìù –ò—Å–ø—Ä–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data: 'show_correction_menu' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_from_add' }]
        ]
    }
};
const pieTypesForCorrectionKeyboard = {
    reply_markup: {
        inline_keyboard: [
            ...pieTypes.map(type => ([{ text: `üóëÔ∏è ${type}`, callback_data: `correct_pie_${type}` }])),
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_add_menu' }]
        ]
    }
};
async function createCorrectionKeyboard(chatId, pieType) {
    const entries = await db.getTodaysManufacturedEntries(chatId, pieType);
    const buttons = [];
    const hasEntries = entries.length > 0;
    if (hasEntries) {
        entries.forEach(entry => {
            const entryTime = new Date(entry.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', timeZone: 'Asia/Tashkent' });
            buttons.push([
                { text: `+${entry.quantity} —à—Ç. (–≤ ${entryTime})`, callback_data: `info_entry_${entry.id}` },
                { text: '–£–¥–∞–ª–∏—Ç—å ‚ùå', callback_data: `delete_entry_${entry.id}` }
            ]);
        });
    }
    buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞', callback_data: 'show_correction_menu' }]);
    return {
        keyboard: { reply_markup: { inline_keyboard: buttons } },
        hasEntries: hasEntries
    };
}


// --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
async function createSettingsKeyboard(chatId) {
    const currentPrices = await db.getPricesFromDb(chatId);
    const buttons = pieTypes.map(type => {
        const priceText = currentPrices[type] > 0 ? `(${formatNumber(currentPrices[type])} ${currencySymbol})` : '(–Ω–µ –∑–∞–¥–∞–Ω–∞)';
        return [{ text: `üí≤ ${type} ${priceText}`, callback_data: `set_price_${type}` }];
    });
    buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –≥–ª. –º–µ–Ω—é', callback_data: 'back_to_main_from_settings' }]);
    return { reply_markup: { inline_keyboard: buttons } };
}
async function createRemainingKeyboard(chatId) {
    const logs = await db.getTodaysLogsGrouped(chatId);
    const buttons = pieTypes
        .filter(type => (logs[type]?.manufactured || 0) > 0)
        .map(type => {
            const log = logs[type];
            const manufactured = log?.manufactured || 0;
            const remainingText = (log?.remaining !== null && log?.remaining !== undefined) ? log.remaining : '–Ω–µ –≤–≤–µ–¥–µ–Ω–æ';
            const buttonText = `üì¶ ${type} (${formatNumber(manufactured)} / ${remainingText})`;
            return [{ text: buttonText, callback_data: `enter_remaining_${type}` }];
        });
    if (buttons.length > 0) {
        buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –≥–ª. –º–µ–Ω—é', callback_data: 'back_to_main_from_remaining' }]);
    } else {
        buttons.push([{ text: '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∏—Ä–æ–∂–∫–∏', callback_data: 'no_pies_for_remaining' }]);
        buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –≥–ª. –º–µ–Ω—é', callback_data: 'back_to_main_from_remaining' }]);
    }
    return { reply_markup: { inline_keyboard: buttons } };
}
async function createWriteOffKeyboard(chatId) {
    const logs = await db.getTodaysLogsGrouped(chatId);
    const buttons = pieTypes
        .filter(type => (logs[type]?.remaining || 0) > 0)
        .map(type => {
            const log = logs[type];
            const remaining = log?.remaining || 0;
            const writtenOff = log?.written_off || 0;
            return [{ text: `üóëÔ∏è ${type} (–æ—Å—Ç–∞—Ç–æ–∫: ${remaining}, —Å–ø–∏—Å–∞–Ω–æ: ${writtenOff})`, callback_data: `write_off_${type}` }];
        });
    if (buttons.length > 0) {
        buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –≥–ª. –º–µ–Ω—é', callback_data: 'back_to_main_from_writeoff' }]);
    } else {
        buttons.push([{ text: '–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è', callback_data: 'no_pies_for_writeoff' }]);
    }
    return { reply_markup: { inline_keyboard: buttons } };
}
const statsPeriodKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [{ text: 'üìà –ó–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'stats_period_today' }, { text: 'üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'stats_period_week' }],
            [{ text: 'üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü', callback_data: 'stats_period_month' }, { text: '‚úçÔ∏è –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã', callback_data: 'stats_period_custom' }],
            [{ text: 'üß† –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'show_analytics_menu' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_from_stats' }]
        ]
    }
};
const analyticsTypeKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [{ text: 'üèÜ –°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –ø–∏—Ä–æ–∂–æ–∫', callback_data: 'analytics_most_profitable' }],
            [{ text: 'üìà –°–∞–º—ã–π –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã–π –ø–∏—Ä–æ–∂–æ–∫', callback_data: 'analytics_most_sold' }],
            [{ text: 'üìÖ –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', callback_data: 'analytics_weekday' }],
            [{ text: 'ü§ñ AI –ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞', callback_data: 'analytics_ai_forecast' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'back_to_stats_menu' }]
        ]
    }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
module.exports = {
    mainKeyboard,
    pieTypesKeyboard,
    statsPeriodKeyboard,
    analyticsTypeKeyboard,
    createSettingsKeyboard,
    createRemainingKeyboard,
    createWriteOffKeyboard,
    pieTypesForCorrectionKeyboard,
    createCorrectionKeyboard,
    // –ù–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
    expensesMenuKeyboard,
    createExpenseCorrectionKeyboard
};
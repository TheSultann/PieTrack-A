-- ===================================================================
-- ШАГ 1: СОЗДАНИЕ НОВОЙ ТАБЛИЦЫ ДЛЯ УЧЕТА КАЖДОГО РАСХОДА
-- ===================================================================
CREATE TABLE IF NOT EXISTS public.expense_log_entries (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    chat_id BIGINT NOT NULL,
    log_date DATE NOT NULL DEFAULT CURRENT_DATE,
    amount NUMERIC NOT NULL CHECK (amount > 0),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
ALTER TABLE public.expense_log_entries ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow anon full access to expense_log_entries" ON public.expense_log_entries FOR ALL TO anon USING (true) WITH CHECK (true);


-- ===================================================================
-- ШАГ 2: СОЗДАНИЕ НОВЫХ ФУНКЦИЙ ДЛЯ РАБОТЫ С РАСХОДАМИ
-- ===================================================================

-- ФУНКЦИЯ №1: Добавление новой записи о расходе.
CREATE OR REPLACE FUNCTION public.add_expense_entry(p_chat_id BIGINT, p_amount NUMERIC)
RETURNS NUMERIC
LANGUAGE plpgsql SECURITY DEFINER AS $$
DECLARE
    v_new_total NUMERIC;
BEGIN
    -- Добавляем запись в "кассовую ленту" расходов
    INSERT INTO public.expense_log_entries (chat_id, log_date, amount)
    VALUES (p_chat_id, CURRENT_DATE, p_amount);

    -- Обновляем (или создаем) общую сумму в daily_expenses
    INSERT INTO public.daily_expenses (chat_id, log_date, expenses)
    VALUES (p_chat_id, CURRENT_DATE, p_amount)
    ON CONFLICT (chat_id, log_date) DO UPDATE
    SET expenses = daily_expenses.expenses + p_amount,
        updated_at = NOW()
    RETURNING expenses INTO v_new_total;

    RETURN v_new_total;
END;
$$;


-- ФУНКЦИЯ №2: Удаление конкретной записи о расходе по её ID.
CREATE OR REPLACE FUNCTION public.delete_expense_entry(p_entry_id BIGINT, p_chat_id BIGINT)
RETURNS NUMERIC
LANGUAGE plpgsql SECURITY DEFINER AS $$
DECLARE
    v_deleted_amount NUMERIC;
    v_new_total NUMERIC;
BEGIN
    -- Находим и удаляем запись, получая её сумму
    DELETE FROM public.expense_log_entries
    WHERE id = p_entry_id AND chat_id = p_chat_id
    RETURNING amount INTO v_deleted_amount;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Запись о расходе с ID % не найдена.', p_entry_id;
    END IF;

    -- Обновляем общую сумму, вычитая удаленный расход
    UPDATE public.daily_expenses
    SET expenses = expenses - v_deleted_amount,
        updated_at = NOW()
    WHERE chat_id = p_chat_id AND log_date = CURRENT_DATE
    RETURNING expenses INTO v_new_total;

    RETURN v_new_total;
END;
$$;

-- ===================================================================
-- ШАГ 3: УДАЛЕНИЕ СТАРОЙ ФУНКЦИИ
-- ===================================================================
DROP FUNCTION IF EXISTS public.upsert_daily_expenses(p_chat_id BIGINT, p_add_amount NUMERIC);